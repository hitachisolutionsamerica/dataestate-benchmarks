-- This procedure merges new and updated accounts into the ACCOUNT_ODS table for the incremental loads.
CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.ACCOUNT_ODS_SP()
  returns string
  language javascript
  as
  $$
  // Process ODS Table
  var stmt = snowflake.createStatement(
      {sqlText: "MERGE INTO TPCDI_ODS.PUBLIC.ACCOUNT_ODS USING (SELECT CDC_FLAG, CDC_DSN, CA_ID, CA_B_ID, CA_C_ID, CA_NAME, CA_TAX_ST, CA_ST_ID, METADATA$ACTION, METADATA$ISUPDATE FROM TPCDI_STG.PUBLIC.ACCOUNT_STG_STM) ACCOUNT_STG ON TPCDI_ODS.PUBLIC.ACCOUNT_ODS.CA_ID = ACCOUNT_STG.CA_ID WHEN MATCHED AND ACCOUNT_STG.CDC_FLAG = 'U' THEN UPDATE SET ACCOUNT_ODS.CA_B_ID = COALESCE(ACCOUNT_STG.CA_B_ID,ACCOUNT_ODS.CA_B_ID), ACCOUNT_ODS.CA_C_ID = COALESCE(ACCOUNT_STG.CA_C_ID,ACCOUNT_ODS.CA_C_ID), ACCOUNT_ODS.CA_NAME = COALESCE(ACCOUNT_STG.CA_NAME,ACCOUNT_ODS.CA_NAME), ACCOUNT_ODS.CA_TAX_ST = COALESCE(ACCOUNT_STG.CA_TAX_ST,ACCOUNT_ODS.CA_TAX_ST), ACCOUNT_ODS.CA_ST_ID = COALESCE(ACCOUNT_STG.CA_ST_ID,ACCOUNT_ODS.CA_ST_ID), ACCOUNT_ODS.LAST_UPDATED_TS = CURRENT_TIMESTAMP() WHEN NOT MATCHED AND ACCOUNT_STG.CDC_FLAG = 'I' THEN INSERT VALUES (ACCOUNT_STG.CA_ID, ACCOUNT_STG.CA_B_ID, ACCOUNT_STG.CA_C_ID, ACCOUNT_STG.CA_NAME, ACCOUNT_STG.CA_TAX_ST, ACCOUNT_STG.CA_ST_ID, CURRENT_TIMESTAMP() )"}
    );
  stmt.execute();
  // Log audit record
  var audit_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'ACCOUNT_ODS_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, $2 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))"}
    );
  audit_stmt.execute();
  return 'Account ODS records processed.';
  $$
;
