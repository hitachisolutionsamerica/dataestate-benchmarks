CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.FINWIRE_SEC_ODS_SP(levels float)
  returns string
  language javascript
  as
  $$
  var level_counter = 1
  while (level_counter <= LEVELS)
  {
  // Process ODS Table
  var ods_stmt = snowflake.createStatement(
      {sqlText: "MERGE INTO TPCDI_ODS.PUBLIC.FINWIRE_SEC_ODS USING ( WITH NTH_PTS_DATE_ROW AS (SELECT DISTINCT NTH_VALUE(S.PTS," + level_counter + ") OVER (PARTITION BY S.SYMBOL ORDER BY S.PTS) AS NTH_PTS_DATE, S.SYMBOL AS S_SYMBOL FROM TPCDI_STG.PUBLIC.FINWIRE_SEC_STG S) SELECT FSS.PTS, FSS.REC_TYPE, FSS.SYMBOL, FSS.ISSUE_TYPE, FSS.STATUS, FSS.NAME, FSS.EX_ID, FSS.SH_OUT, FSS.FIRST_TRADE_DATE, FSS.FIRST_TRADE_EXCHG, FSS.DIVIDEND, FSS.CO_NAME_OR_CIK FROM TPCDI_STG.PUBLIC.FINWIRE_SEC_STG FSS JOIN NTH_PTS_DATE_ROW ON NTH_PTS_DATE_ROW.NTH_PTS_DATE = FSS.PTS AND NTH_PTS_DATE_ROW.S_SYMBOL = FSS.SYMBOL ) FINWIRE_SEC_STG ON TPCDI_ODS.PUBLIC.FINWIRE_SEC_ODS.SYMBOL = FINWIRE_SEC_STG.SYMBOL WHEN MATCHED THEN UPDATE SET FINWIRE_SEC_ODS.PTS = FINWIRE_SEC_STG.PTS, FINWIRE_SEC_ODS.REC_TYPE = FINWIRE_SEC_STG.REC_TYPE, FINWIRE_SEC_ODS.ISSUE_TYPE = FINWIRE_SEC_STG.ISSUE_TYPE, FINWIRE_SEC_ODS.STATUS = FINWIRE_SEC_STG.STATUS, FINWIRE_SEC_ODS.NAME = FINWIRE_SEC_STG.NAME, FINWIRE_SEC_ODS.EX_ID = FINWIRE_SEC_STG.EX_ID, FINWIRE_SEC_ODS.SH_OUT = FINWIRE_SEC_STG.SH_OUT, FINWIRE_SEC_ODS.FIRST_TRADE_DATE = FINWIRE_SEC_STG.FIRST_TRADE_DATE, FINWIRE_SEC_ODS.FIRST_TRADE_EXCHG = FINWIRE_SEC_STG.FIRST_TRADE_EXCHG, FINWIRE_SEC_ODS.DIVIDEND = FINWIRE_SEC_STG.DIVIDEND, FINWIRE_SEC_ODS.CO_NAME_OR_CIK = FINWIRE_SEC_STG.CO_NAME_OR_CIK, FINWIRE_SEC_ODS.LAST_UPDATED_TS = CURRENT_TIMESTAMP() WHEN NOT MATCHED THEN INSERT VALUES ( FINWIRE_SEC_STG.PTS, FINWIRE_SEC_STG.REC_TYPE, FINWIRE_SEC_STG.SYMBOL, FINWIRE_SEC_STG.ISSUE_TYPE, FINWIRE_SEC_STG.STATUS, FINWIRE_SEC_STG.NAME, FINWIRE_SEC_STG.EX_ID, FINWIRE_SEC_STG.SH_OUT, FINWIRE_SEC_STG.FIRST_TRADE_DATE, FINWIRE_SEC_STG.FIRST_TRADE_EXCHG, FINWIRE_SEC_STG.DIVIDEND, FINWIRE_SEC_STG.CO_NAME_OR_CIK, CURRENT_TIMESTAMP())"}
      );
    ods_stmt.execute();
    // Log audit record
    var audit_stmt = snowflake.createStatement(
        {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'FINWIRE_SEC_ODS_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, $2 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))"}
      );
    audit_stmt.execute();
    // Check for last loop and create Stream for flow control
    if (level_counter == LEVELS) {
    var stm_stmt = snowflake.createStatement(
        {sqlText: "CREATE OR REPLACE STREAM TPCDI_WH.PUBLIC.DIM_SECURITY_STM ON TABLE TPCDI_WH.PUBLIC.DIM_SECURITY"}
      );
    stm_stmt.execute();
    }
    // Process Dimension Table Updates
    var wh_stmt = snowflake.createStatement(
        {sqlText: "CALL TPCDI_WH.PUBLIC.DIM_SECURITY_SP()"}
      );
    wh_stmt.execute();
    level_counter++
  }
  return 'Historical Security records processed.';
  $$
;
