-- This procedure processes account updates into ACCOUNT_ODS in the order in which they happened for the historical load.
CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.ACCOUNT_UPDT_ODS_SP(levels float)
  returns string
  language javascript
  as
  $$
  var level_counter = 1
  while (level_counter <= LEVELS)
  {
  // Process ODS Table Updates
  var ods_stmt = snowflake.createStatement(
      {sqlText: "MERGE INTO TPCDI_ODS.PUBLIC.ACCOUNT_ODS USING (WITH NTH_ACTION_DATE_ROW AS (SELECT DISTINCT NTH_VALUE(AUN.ACTION_DATE," + level_counter + ") OVER (PARTITION BY AUN.CUSTOMER_ACCOUNT_ID ORDER BY AUN.ACTION_DATE) AS NTH_ACTION_DATE, AUN.CUSTOMER_ACCOUNT_ID AS AUN_CA_ID FROM TPCDI_STG.PUBLIC.ACCOUNT_UPDT_STG AUN) SELECT AU.CUSTOMER_ACCOUNT_BROKER_ID, AU.CUSTOMER_ID, AU.CUSTOMER_ACCOUNT_NAME, AU.CUSTOMER_ACCOUNT_TAX_STATUS, AU.CUSTOMER_ACCOUNT_ID FROM TPCDI_STG.PUBLIC.ACCOUNT_UPDT_STG AU JOIN NTH_ACTION_DATE_ROW ON NTH_ACTION_DATE_ROW.NTH_ACTION_DATE = AU.ACTION_DATE AND NTH_ACTION_DATE_ROW.AUN_CA_ID = AU.CUSTOMER_ACCOUNT_ID) AUS ON AUS.CUSTOMER_ACCOUNT_ID = ACCOUNT_ODS.CA_ID WHEN MATCHED THEN UPDATE SET ACCOUNT_ODS.CA_B_ID = COALESCE(AUS.CUSTOMER_ACCOUNT_BROKER_ID,ACCOUNT_ODS.CA_B_ID), ACCOUNT_ODS.CA_C_ID = COALESCE(AUS.CUSTOMER_ID,ACCOUNT_ODS.CA_C_ID), ACCOUNT_ODS.CA_NAME = COALESCE(AUS.CUSTOMER_ACCOUNT_NAME,ACCOUNT_ODS.CA_NAME), ACCOUNT_ODS.CA_TAX_ST = COALESCE(AUS.CUSTOMER_ACCOUNT_TAX_STATUS,ACCOUNT_ODS.CA_TAX_ST), ACCOUNT_ODS.LAST_UPDATED_TS = CURRENT_TIMESTAMP() WHEN NOT MATCHED THEN INSERT VALUES (AUS.CUSTOMER_ACCOUNT_ID, AUS.CUSTOMER_ACCOUNT_BROKER_ID, AUS.CUSTOMER_ID, AUS.CUSTOMER_ACCOUNT_NAME, AUS.CUSTOMER_ACCOUNT_TAX_STATUS, 'ACTV', CURRENT_TIMESTAMP())"}
    );
  ods_stmt.execute();
  // Log audit record
  var audit_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'ACCOUNT_UPDT_ODS_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, $2 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))"}
    );
  audit_stmt.execute();
  // Process Dimension Table Updates
  var wh_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.DIM_ACCOUNT_SP()"}
    );
  wh_stmt.execute();
  level_counter++
  }
  return 'Accounts updated.';
  $$
;

