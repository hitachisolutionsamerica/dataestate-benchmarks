-- INCREMENTAL LOAD

-- ALTER SESSION TO SET PARAMETER TO ALLOW MULTIPLE INSTANCES OF SAME BUSINESS ID FOR UPDATES IN STAGE
ALTER SESSION SET ERROR_ON_NONDETERMINISTIC_MERGE = FALSE;

-- MERGE RECORDS FROM STAGE
MERGE INTO TPCDI_WH.PUBLIC.DIM_ACCOUNT USING
    (
      SELECT
          CA_ID ACCOUNT_ID
        , COALESCE(DIM_BROKER.SK_BROKER_ID,0) SK_BROKER_ID
        , COALESCE(DIM_CUSTOMER.SK_CUSTOMER_ID,0) SK_CUSTOMER_ID
        , 'ACTIVE' STATUS
        , CA_NAME ACCOUNT_DESC
        , CA_TAX_ST TAX_STATUS
        , TO_NUMBER(1) IS_CURRENT
        , TO_NUMBER(2) BATCH_ID
        , EFFECTIVE_DATE.EFFECTIVE_DATE
        , TO_DATE('12/31/9999','MM/DD/YYYY') END_DATE
      FROM TPCDI_STG.PUBLIC.ACCOUNT_STG
      JOIN 
          (SELECT
              MIN(DATE_VALUE) EFFECTIVE_DATE
           FROM TPCDI_WH.PUBLIC.DIM_DATE) EFFECTIVE_DATE ON
          1 = 1
      LEFT JOIN TPCDI_WH.PUBLIC.DIM_BROKER ON
          ACCOUNT_STG.CA_B_ID  = DIM_BROKER.BROKER_ID
      LEFT JOIN TPCDI_WH.PUBLIC.DIM_CUSTOMER ON
          ACCOUNT_STG.CA_C_ID = DIM_CUSTOMER.CUSTOMER_ID
    ) ACCOUNT_UPDATES ON DIM_ACCOUNT.ACCOUNT_ID = ACCOUNT_UPDATES.ACCOUNT_ID
WHEN MATCHED THEN UPDATE SET
    DIM_ACCOUNT.ACCOUNT_ID = COALESCE(ACCOUNT_UPDATES.ACCOUNT_ID,DIM_ACCOUNT.ACCOUNT_ID),
    DIM_ACCOUNT.SK_BROKER_ID = COALESCE(ACCOUNT_UPDATES.SK_BROKER_ID,DIM_ACCOUNT.SK_BROKER_ID),
    DIM_ACCOUNT.SK_CUSTOMER_ID = COALESCE(ACCOUNT_UPDATES.SK_CUSTOMER_ID,DIM_ACCOUNT.SK_CUSTOMER_ID),
    DIM_ACCOUNT.STATUS = COALESCE(ACCOUNT_UPDATES.STATUS,DIM_ACCOUNT.STATUS),
    DIM_ACCOUNT.ACCOUNT_DESC = COALESCE(ACCOUNT_UPDATES.ACCOUNT_DESC,DIM_ACCOUNT.ACCOUNT_DESC),
    DIM_ACCOUNT.TAX_STATUS = COALESCE(ACCOUNT_UPDATES.TAX_STATUS,DIM_ACCOUNT.TAX_STATUS),
    DIM_ACCOUNT.IS_CURRENT = COALESCE(ACCOUNT_UPDATES.IS_CURRENT,DIM_ACCOUNT.IS_CURRENT),
    DIM_ACCOUNT.BATCH_ID = COALESCE(ACCOUNT_UPDATES.BATCH_ID,DIM_ACCOUNT.BATCH_ID),
    DIM_ACCOUNT.EFFECTIVE_DATE = COALESCE(ACCOUNT_UPDATES.EFFECTIVE_DATE,DIM_ACCOUNT.EFFECTIVE_DATE),
    DIM_ACCOUNT.END_DATE = COALESCE(ACCOUNT_UPDATES.END_DATE,DIM_ACCOUNT.END_DATE)
WHEN NOT MATCHED THEN INSERT
    ( SK_ACCOUNT_ID,
      ACCOUNT_ID,
      SK_BROKER_ID,
      SK_CUSTOMER_ID,
      STATUS,
      ACCOUNT_DESC,
      TAX_STATUS,
      IS_CURRENT,
      BATCH_ID,
      EFFECTIVE_DATE,
      END_DATE )
VALUES
    ( TPCDI_WH.PUBLIC.DIM_ACCOUNT_SEQ.NEXTVAL,
      ACCOUNT_UPDATES.ACCOUNT_ID,
      ACCOUNT_UPDATES.SK_BROKER_ID,
      ACCOUNT_UPDATES.SK_CUSTOMER_ID,
      ACCOUNT_UPDATES.STATUS,
      ACCOUNT_UPDATES.ACCOUNT_DESC,
      ACCOUNT_UPDATES.TAX_STATUS,
      ACCOUNT_UPDATES.IS_CURRENT,
      ACCOUNT_UPDATES.BATCH_ID,
      ACCOUNT_UPDATES.EFFECTIVE_DATE,
      ACCOUNT_UPDATES.END_DATE
    )
;