-- INCREMENTAL LOAD

-- ALTER SESSION TO SET PARAMETER TO ALLOW MULTIPLE INSTANCES OF SAME BUSINESS ID FOR UPDATES IN STAGE
ALTER SESSION SET ERROR_ON_NONDETERMINISTIC_MERGE = FALSE;

-- MERGE RECORDS FROM STAGE
MERGE INTO TPCDI_WH.PUBLIC.DIM_TRADE USING
    (
  SELECT
       TRADE_ODS_STM.T_ID TRADE_ID
     , COALESCE(DIM_ACCOUNT_NOW.SK_BROKER_ID,0) SK_BROKER_ID
     , DIM_DATE.DATE_ID DATE_ID
     , DIM_TIME.TIME_ID TIME_ID
     , DIM_STATUS_TYPE.ST_NAME STATUS
     , DIM_TRADE_TYPE.TT_NAME TYPE
     , TRADE_ODS_STM.T_IS_CASH CASH_FLAG
     , COALESCE(DIM_SECURITY_NOW.SK_SECURITY_ID,0) SK_SECURITY_ID
     , COALESCE(DIM_SECURITY_NOW.SK_COMPANY_ID,0) SK_COMPANY_ID
     , TRADE_ODS_STM.T_QTY QUANTITY
     , TRADE_ODS_STM.T_BID_PRICE BID_PRICE
     , COALESCE(DIM_ACCOUNT_NOW.SK_CUSTOMER_ID,0) SK_CUSTOMER_ID
     , COALESCE(DIM_ACCOUNT_NOW.SK_ACCOUNT_ID,0) SK_ACCOUNT_ID
     , TRADE_ODS_STM.T_EXEC_NAME EXECUTED_BY
     , TRADE_ODS_STM.T_TRADE_PRICE TRADE_PRICE
     , TRADE_ODS_STM.T_CHRG FEE
     , TRADE_ODS_STM.T_COMM COMMISSION
     , TRADE_ODS_STM.T_TAX TAX
     , TO_NUMBER(1) BATCH_ID
     , METADATA$ACTION
     , METADATA$ISUPDATE
  FROM TPCDI_ODS.PUBLIC.TRADE_ODS_STM
  INNER JOIN TPCDI_WH.PUBLIC.DIM_STATUS_TYPE 
      ON TRADE_ODS_STM.T_ST_ID = DIM_STATUS_TYPE.ST_ID
  INNER JOIN TPCDI_WH.PUBLIC.DIM_TRADE_TYPE
      ON TRADE_ODS_STM.T_TT_ID = DIM_TRADE_TYPE.TT_ID
  LEFT OUTER JOIN TPCDI_WH.PUBLIC.DIM_ACCOUNT_NOW
  	  ON TRADE_ODS_STM.T_CA_ID = DIM_ACCOUNT_NOW.ACCOUNT_ID
  INNER JOIN TPCDI_WH.PUBLIC.DIM_SECURITY_NOW
  	  ON TRADE_ODS_STM.T_S_SYMB = DIM_SECURITY_NOW.SYMBOL
  INNER JOIN TPCDI_WH.PUBLIC.DIM_DATE
  	  ON TO_DATE(TRADE_ODS_STM.T_DTS) = DIM_DATE.DATE_VALUE
  INNER JOIN TPCDI_WH.PUBLIC.DIM_TIME
  	  ON TO_TIME(TO_CHAR(TRADE_ODS_STM.T_DTS,'HH:MM:SS')) = DIM_TIME.TIME_VALUE
    ) TRADE_UPDATES ON DIM_TRADE.TRADE_ID = TRADE_UPDATES.TRADE_ID
WHEN MATCHED AND METADATA$ACTION = 'INSERT' AND METADATA$ISUPDATE = 'TRUE' AND TRADE_UPDATES.STATUS IN ('Completed','Canceled') THEN UPDATE SET
      DIM_TRADE.SK_BROKER_ID = TRADE_UPDATES.SK_BROKER_ID
    , DIM_TRADE.SK_CLOSE_DATE_ID = TRADE_UPDATES.DATE_ID
    , DIM_TRADE.SK_CLOSE_TIME_ID = TRADE_UPDATES.TIME_ID
    , DIM_TRADE.STATUS = TRADE_UPDATES.STATUS
    , DIM_TRADE.TYPE = TRADE_UPDATES.TYPE
    , DIM_TRADE.CASH_FLAG = TRADE_UPDATES.CASH_FLAG
    , DIM_TRADE.SK_SECURITY_ID = TRADE_UPDATES.SK_SECURITY_ID
    , DIM_TRADE.SK_COMPANY_ID = TRADE_UPDATES.SK_COMPANY_ID
    , DIM_TRADE.QUANTITY = TRADE_UPDATES.QUANTITY
    , DIM_TRADE.BID_PRICE = TRADE_UPDATES.BID_PRICE
    , DIM_TRADE.SK_CUSTOMER_ID = TRADE_UPDATES.SK_CUSTOMER_ID
    , DIM_TRADE.SK_ACCOUNT_ID = TRADE_UPDATES.SK_ACCOUNT_ID
    , DIM_TRADE.EXECUTED_BY = TRADE_UPDATES.EXECUTED_BY
    , DIM_TRADE.TRADE_PRICE = TRADE_UPDATES.TRADE_PRICE
    , DIM_TRADE.FEE = TRADE_UPDATES.FEE
    , DIM_TRADE.COMMISSION = TRADE_UPDATES.COMMISSION
    , DIM_TRADE.TAX = TRADE_UPDATES.TAX
    , DIM_TRADE.BATCH_ID = TRADE_UPDATES.BATCH_ID
    , DIM_TRADE.LAST_UPDATED_TS = LOCALTIMESTAMP()
WHEN NOT MATCHED THEN INSERT
VALUES
    (
        TRADE_UPDATES.TRADE_ID
      , TRADE_UPDATES.SK_BROKER_ID
      , TRADE_UPDATES.DATE_ID
      , TRADE_UPDATES.TIME_ID
      , NULL
      , NULL
      , TRADE_UPDATES.STATUS
      , TRADE_UPDATES.TYPE
      , TRADE_UPDATES.CASH_FLAG
      , TRADE_UPDATES.SK_SECURITY_ID
      , TRADE_UPDATES.SK_COMPANY_ID
      , TRADE_UPDATES.QUANTITY
      , TRADE_UPDATES.BID_PRICE
      , TRADE_UPDATES.SK_CUSTOMER_ID
      , TRADE_UPDATES.SK_ACCOUNT_ID
      , TRADE_UPDATES.EXECUTED_BY
      , TRADE_UPDATES.TRADE_PRICE
      , TRADE_UPDATES.FEE
      , TRADE_UPDATES.COMMISSION
      , TRADE_UPDATES.TAX
      , TRADE_UPDATES.BATCH_ID
      , LOCALTIMESTAMP()
    )
;
