<!--
/*******************************************************************************
 * Copyright (c) 2013, bankmark and/or its affiliates. All rights reserved. 
 * bankmark UG PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 *
 *
 *

 ******************************************************************************/
-->
<include>
    	<!-- AUDIT by Jackson -->
		<output name="StatisticsOutput" active="${AuditingAndReportingSystemActive}">				
			<size>7</size>
			<fileTemplate>outputDir + "Batch1/" + table.getName() + (1967 + ((updateID - (updateID % 4)) / 4)) + "Q" + ((updateID % 4) + 1) + "_audit" + fileEnding</fileTemplate>
			<outputDir>output/</outputDir>
			<fileEnding>.csv</fileEnding>
			<delimiter>,</delimiter>
			<header><!--"DataSet, BatchID ,Date , Attribute , Value, DValue" + pdgf.util.Constants.DEFAULT_LINESEPARATOR--></header>
			<footer></footer>
					
			<tableChangedEventTemplate><!-- 
				//reset counters at statistics file change
				for ( int i = 0 ; i < counter.length; i++) {
					counter[i].set(0L);
				}
				
				//BatchId of current statisticsFile
				int batchID=1;
				keyValueStore.put("batchID", Integer.valueOf(batchID));	
			-->
			</tableChangedEventTemplate>
			
			<!-- Format the collected counter statistics -->
			<formaterTemplate><!-- 
			
				int batchID=((Integer)keyValueStore.get("batchID")).intValue();
			
				//DimSecurity, 1,  null, FW_SEC, v, null
				buf.append("DimSecurity");
				buf.append(delimiter);
				buf.append("1");
				buf.append(delimiter);
				buf.append("");
				buf.append(delimiter);
				buf.append("FW_SEC");
				buf.append(delimiter);
				buf.append(counter[1]);
				buf.append(delimiter);
				buf.append("");
				buf.append(pdgf.util.Constants.DEFAULT_LINESEPARATOR);
				
				//DimSecurity, 1,  null, FW_SEC_DUP, v, null
				buf.append("DimSecurity");
				buf.append(delimiter);
				buf.append("1");
				buf.append(delimiter);
				buf.append("");
				buf.append(delimiter);
				buf.append("FW_SEC_DUP");
				buf.append(delimiter);
				buf.append(counter[2]);
				buf.append(delimiter);
				buf.append("");
				buf.append(pdgf.util.Constants.DEFAULT_LINESEPARATOR);
				
				//DimCompany, 1,  null, FW_CMP, v, null
				buf.append("DimCompany");
				buf.append(delimiter);
				buf.append("1");
				buf.append(delimiter);
				buf.append("");
				buf.append(delimiter);
				buf.append("FW_CMP");
				buf.append(delimiter);
				buf.append(counter[3]);
				buf.append(delimiter);
				buf.append("");
				buf.append(pdgf.util.Constants.DEFAULT_LINESEPARATOR);
				
				//DimCompany, 1,  null, FW_CMP_DUP, v, null
				buf.append("DimCompany");
				buf.append(delimiter);
				buf.append("1");
				buf.append(delimiter);
				buf.append("");
				buf.append(delimiter);
				buf.append("FW_CMP_DUP");
				buf.append(delimiter);
				buf.append(counter[4]);
				buf.append(delimiter);
				buf.append("");
				buf.append(pdgf.util.Constants.DEFAULT_LINESEPARATOR);
				
				//DimCompany, 1,  null, FW_FIN, v, null
				buf.append("Financial");
				buf.append(delimiter);
				buf.append("1");
				buf.append(delimiter);
				buf.append("");
				buf.append(delimiter);
				buf.append("FW_FIN");
				buf.append(delimiter);
				buf.append(counter[5]);
				buf.append(delimiter);
				buf.append("");
				buf.append(pdgf.util.Constants.DEFAULT_LINESEPARATOR);
				
				//DimCompany, 1,  null, FW_FIN_DUP, v, null
				buf.append("Financial");
				buf.append(delimiter);
				buf.append("1");
				buf.append(delimiter);
				buf.append("");
				buf.append(delimiter);
				buf.append("FW_FIN_DUP");
				buf.append(delimiter);
				buf.append(counter[6]);
				buf.append(delimiter);
				buf.append("");
				buf.append(pdgf.util.Constants.DEFAULT_LINESEPARATOR);

				
				//FEATURE: record total number of records per batch
		       	String key = tpc.di.TPC_DI_CONSTANTS.AUDIT.TOTAL_RECORDS_PER_BATCH.toString();
			    Object o = tpc.di.output.AuditPersistenceStore.instance().getStore().get(key);
		
			    java.util.List []  perBatchRecordCounters = (java.util.List []) o;
			    long RECORDS = counter[0].get();
			    perBatchRecordCounters[batchID-1].add(Long.valueOf(RECORDS));	
				-->
			 </formaterTemplate>
			
			<!-- collect statistics -->
			<counterTemplate><!-- 
		
				pdgf.core.dataGenerator.beans.FieldValueDTO recType = null;
				recType = field[1];
		
				//###############
				// START COUNTING
				//###############
				
				// FW_RECORDS==counter[0] Number of records generated for this
				counter[0].incrementAndGet();
		
				if(recType.getValue()!=null){
					char recTypeValue = ((String) recType.getValue()).charAt(0);
			
					// FW_SEC==counter[1] Total number CMP records
					if (recTypeValue == 'S') {
						counter[1].incrementAndGet();
						// FW_CMP==counter[3] Total number SEC records
					} else if (recTypeValue == 'C') {
						counter[3].incrementAndGet();
						// FW_FIN==counter[5] Total number of FIN records
					} else if (recTypeValue == 'F') {
						counter[5].incrementAndGet();
					}
				}
		
				// FW_SEC_DUP==counter[2] Total number of duplicated records in SEC records
				// FW_CMP_DUP==counter[4] Total number of duplicated records in CMP records
				// FW_FIN_DUP==counter[6] Total number of duplicated records in FIN records							
				counter[2].set(-1L);
				counter[4].set(-1L);
				counter[6].set(-1L);
			
			-->
			</counterTemplate>
		</output>	
</include>